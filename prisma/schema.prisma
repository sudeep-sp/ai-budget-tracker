generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserSettings {
  userId         String  @id
  currency       String
  monthlyBudget  Float?
  savingsGoal    Float?
  defaultGroupId String?
}

model Category {
  createdAt DateTime @default(now())
  name      String
  userId    String
  icon      String
  type      String   @default("income")
  groupId   String?

  @@unique([name, userId, type])
}

model Transaction {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  amount       Float
  description  String
  date         DateTime
  userId       String
  type         String   @default("income")
  category     String
  categoryIcon String
  groupId      String?
}

model ExpenseGroup {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   String
  currency    String            @default("USD")
  isActive    Boolean           @default(true)
  invitations GroupInvitation[]
  members     GroupMember[]
  expenses    SharedExpense[]
}

model GroupMember {
  id          String       @id @default(uuid())
  groupId     String
  userId      String
  name        String
  email       String
  role        String       @default("member")
  permissions String       @default("[]")
  joinedAt    DateTime     @default(now())
  isActive    Boolean      @default(true)
  group       ExpenseGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model GroupInvitation {
  id        String       @id @default(uuid())
  groupId   String
  email     String
  userId    String?
  invitedBy String
  status    String       @default("pending")
  token     String       @unique
  createdAt DateTime     @default(now())
  expiresAt DateTime
  group     ExpenseGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, email])
}

model SharedExpense {
  id              String              @id @default(uuid())
  groupId         String
  paidBy          String
  amount          Float
  description     String
  category        String
  categoryIcon    String
  date            DateTime
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  splitType       String
  splitData       String
  isRecurring     Boolean             @default(false)
  recurringConfig String?
  attachments     ExpenseAttachment[]
  splits          ExpenseSplit[]
  group           ExpenseGroup        @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model ExpenseSplit {
  id         String           @id @default(uuid())
  expenseId  String
  userId     String
  amount     Float
  percentage Float?
  shares     Int?
  isPaid     Boolean          @default(false)
  payments   ExpensePayment[]
  expense    SharedExpense    @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId])
}

model ExpensePayment {
  id      String       @id @default(uuid())
  splitId String
  paidBy  String
  amount  Float
  date    DateTime     @default(now())
  method  String?
  notes   String?
  split   ExpenseSplit @relation(fields: [splitId], references: [id], onDelete: Cascade)
}

model ExpenseAttachment {
  id         String        @id @default(uuid())
  expenseId  String
  fileName   String
  fileUrl    String
  fileType   String
  fileSize   Int
  uploadedAt DateTime      @default(now())
  uploadedBy String
  expense    SharedExpense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model Settlement {
  id         String   @id @default(uuid())
  groupId    String
  fromUserId String
  toUserId   String
  amount     Float
  settledAt  DateTime @default(now())
  method     String?
  notes      String?

  @@index([groupId])
  @@index([fromUserId])
  @@index([toUserId])
}

model GroupActivity {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  action    String
  details   String
  createdAt DateTime @default(now())

  @@index([groupId, createdAt])
}

model MonthHistory {
  userId  String
  day     Int
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([day, month, year, userId])
}

model YearHistory {
  userId  String
  month   Int
  year    Int
  income  Float
  expense Float

  @@id([month, year, userId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime?

  @@index([userId, createdAt])
  @@index([userId, isRead])
}
